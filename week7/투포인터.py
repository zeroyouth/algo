'''
투 포인터 알고리즘
: 리스트에 순차적으로 접근해야 할 때 두 개의 점의 위치를
기록하면서 처리하는 알고리즘을 의미한다.
시작점과 끝점 2개의 점으로 접근할 데이터의 범위를 표현할 수 있다.

사용방법>
1. 시작점과 끝점이 첫번째 원소의 인덱스(0)을 가리키도록한다.
2. 현재 부분 합이 M과 같다면, 카운트한다.
3. 현재 부분 합이 M보다 작다면, end를 1 증가시킨다.
4. 현재 부분 합이 M보다 크다면, start를 1 증가시킨다.
5. 모든 경우를 확인할 때까지 2번부터 4번까지의 과정을 반복한다.

특정한 합을 가지는 부분 연속 수열 찾기
수열이 존재할때 합이 M=5인 부분 연속 수열의 개수를 구하기

1 2 3 2 5 => 3가지 경우의 수 존재
'''

n = 5 # 데이터의 수
m = 5 # 찾고자 하는 부분합 M
data = [1,2,3,2,5]

count = 0
interval_sum = 0
end = 0

for start in range(n): # 시작을 차례대로 증가시킨다.
    # end를 가능한 만큼 이동시키
    while interval_sum < m and end < n:  # 부분합이 m보다 작고, 끝점이 n보다 작을때만.
        interval_sum += data[end] # 부분합에 end 포인터가 가리키는 data값을 더해줌.
        end += 1 # 그 후 증가시킴
    # 부분합이 m과 같을 때 카운트를 증가
    if interval_sum == m:
        count += 1
    interval_sum -= data[start] # 그리고 start가 가리키는 data값을 부분합에서 빼줌

print(count)
